import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Cursor;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.input.DragEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.text.Text;
import javafx.stage.Stage;

//************************************************************************
//  ClickDistance.java       Author: Lewis/Loftus
//
//  Demonstrates the handling of a mouse click event.
//************************************************************************

public class ClickDistance extends Application
{
    private Line lineAB;
    private Line lineBC;
    private Line lineCA;
    private Text distanceText;
    private Circle Circ1;
    private Circle Circ2;
    private Circle Circ3;
    private Circle Circ4;
    double clickX,clickY;
    double TranX,TranY;
	double TranA, TranB,TranC,TranD;
	double M;
	double offsetX,offsetY,newtranX,
	newtranY;
    
    //--------------------------------------------------------------------
    //  Shows the distance between the origin (0, 0) and the point where
    //  the mouse is clicked.
    //--------------------------------------------------------------------
    public void start(Stage primaryStage)
    {
        lineAB = new Line(200, 150, 150, 200);
        lineBC = new Line(150, 200, 200, 250);
        lineCA = new Line(200, 250, 200, 150);
        Circ1 = new Circle(200,200,50);
        Circ1.setFill(Color.GREENYELLOW);
        Circ2 = new Circle(200,150,10);
        Circ2.setFill(Color.PINK);
        Circ2.setCursor(Cursor.CLOSED_HAND);
        Circ3 = new Circle(150,200,10);
        Circ3.setFill(Color.YELLOW);
        Circ3.setCursor(Cursor.CLOSED_HAND);
        Circ4 = new Circle(200,250,10);
        Circ4.setFill(Color.LIGHTBLUE);
        Circ4.setCursor(Cursor.CLOSED_HAND);
        Circ1.setMouseTransparent(false);
        
        Circ2.setOnMousePressed(action -> {
        	clickX = action.getSceneX();
             clickY = action.getSceneY();
             TranX = ((Circle) (action.getSource())).getTranslateX();
             TranY = ((Circle) (action.getSource())).getTranslateY();
            
          
            
            //double A = acos((distanceCA * distanceCA - distanceBC * distanceBC - distanceAB * distanceAB) / (-2 * distanceBC * distanceAB));
          
            //String distanceStr = String.format("%.2f", distance);
            //distanceText.setText("Distance:  " + distanceStr);
       
        
        });
        Circ2.setOnMouseDragged(action -> {
        	 offsetX = action.getSceneX() - clickX;
        	 offsetY = action.getSceneY() - clickY;
        	 newtranX = TranX + offsetX;
        	 newtranY = TranY + offsetY;
        
        	
        	
        	((Circle)(action.getSource())).setTranslateX(newtranX);
        	((Circle)(action.getSource())).setTranslateY(newtranY);
        	
        	  lineAB.setStartX(action.getSceneX());
              lineAB.setStartY(action.getSceneY());
             
              lineCA.setEndX(action.getSceneX());
              lineCA.setEndY(action.getSceneY());
           
             // double A = Math.acos((distanceCA * distanceCA - distanceBC * distanceBC - distanceAB * distanceAB) / (-2 * distanceBC * distanceAB));
              
              //String distanceStr = String.format("%.2f", A);
              //distanceText.setText("Distance:  " + distanceStr);
      
        });
        
        Circ3.setOnMousePressed(action -> {
        	clickX = action.getSceneX();
            clickY = action.getSceneY();
            TranX = ((Circle) (action.getSource())).getTranslateX();
            TranY = ((Circle) (action.getSource())).getTranslateY();
           
         
           
           //double A = acos((distanceCA * distanceCA - distanceBC * distanceBC - distanceAB * distanceAB) / (-2 * distanceBC * distanceAB));
         
           //String distanceStr = String.format("%.2f", distance);
           //distanceText.setText("Distance:  " + distanceStr);
      
       
       });
        Circ3.setOnMouseDragged(action -> {
       	 offsetX = action.getSceneX() - clickX;
       	 offsetY = action.getSceneY() - clickY;
       	 newtranX = TranX + offsetX;
       	 newtranY = TranY + offsetY;
       
       	
       	
       	((Circle)(action.getSource())).setTranslateX(newtranX);
       	((Circle)(action.getSource())).setTranslateY(newtranY);
       	
       
            lineAB.setEndX(action.getSceneX());
            lineAB.setEndY(action.getSceneY());
            lineBC.setStartX(action.getSceneX());
            lineBC.setStartY(action.getSceneY());
       
        
        });
        
        Circ4.setOnMousePressed(action -> {
        	clickX = action.getSceneX();
            clickY = action.getSceneY();
            TranX = ((Circle) (action.getSource())).getTranslateX();
            TranY = ((Circle) (action.getSource())).getTranslateY();
           
         
           
          
       });
        
        Circ4.setOnMouseDragged(action -> {
          	 offsetX = action.getSceneX() - clickX;
           	 offsetY = action.getSceneY() - clickY;
           	 newtranX = TranX + offsetX;
           	 newtranY = TranY + offsetY;
           
           	
           	
           	((Circle)(action.getSource())).setTranslateX(newtranX);
           	((Circle)(action.getSource())).setTranslateY(newtranY);
        
            lineBC.setEndX(action.getSceneX());
            lineBC.setEndY(action.getSceneY());
            lineCA.setStartX(action.getSceneX());
            lineCA.setStartY(action.getSceneY());
       
        
        });
        
        
        Group root = new Group( lineAB,lineBC,lineCA, Circ1,Circ2,Circ3,Circ4);
        
        Scene scene = new Scene(root, 400, 400, Color.WHITE);

        //scene.setOnMouseReleased(this::processMouseClick);

        primaryStage.setTitle("ANGLES");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    
   /* 
    	double A = lineAB.getStartX();
    double B = lineAB.getStartY();
    double C = lineAB.getEndX();
    double D = lineAB.getEndY();
    double distanceAB = Math.sqrt(A * C + B * D);
    
    double A2 = lineAB.getStartX();
     double B2 = lineAB.getStartY();
     double C2 = lineAB.getEndX();
     double D2= lineAB.getEndY();
     double distanceBC = Math.sqrt(A * C + B * D);
    
     double A3 = lineAB.getStartX();
     double B3 = lineAB.getStartY();
     double C3 = lineAB.getEndX();
     double D3 = lineAB.getEndY();
    double distanceCA = Math.sqrt(A * C + B * D);
    
    
    */
    	
    	
    	
    
   
    
    //--------------------------------------------------------------------
    //  Resets the end point of the line to the location of the mouse
    //  click event and updates the distance displayed.
    //--------------------------------------------------------------------
  /*  public void processMouseClick(MouseEvent event)
    {
    	double clickX = event.getX();
        double clickY = event.getY();
        
        double distance = Math.sqrt(clickX * clickX + clickY * clickY);
        
        String distanceStr = String.format("%.2f", distance);
        distanceText.setText("Distance:  " + distanceStr);
    }
    */
    public static void main(String[] args)
    {
        launch(args);
    }
}
